// <auto-generated />
using System;
using API_PRESTAMOS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_PRESTAMOS.Migrations
{
    [DbContext(typeof(DbsqlPrestamoContext))]
    [Migration("20240924173000_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("API_PRESTAMOS.Models.Client", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("cliente_id");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("apellido");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<string>("Direccion")
                        .HasColumnType("TEXT")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nombre");

                    b.Property<int?>("PuntajeCredito")
                        .HasColumnType("INTEGER")
                        .HasColumnName("puntaje_credito");

                    b.Property<string>("Telefono")
                        .HasColumnType("TEXT")
                        .HasColumnName("telefono");

                    b.Property<string>("id_card")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("passport")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClienteId");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Email" }, "IX_Clients_email")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.ClientHistory", b =>
                {
                    b.Property<int>("HistorialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("historial_id");

                    b.Property<string>("Accion")
                        .HasColumnType("TEXT")
                        .HasColumnName("accion");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cliente_id");

                    b.Property<int?>("PrestamoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prestamo_id");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("HistorialId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PrestamoId");

                    b.ToTable("ClientHistory", (string)null);
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<string>("Direccion")
                        .HasColumnType("TEXT")
                        .HasColumnName("direccion");

                    b.Property<string>("EmailContacto")
                        .HasColumnType("TEXT")
                        .HasColumnName("email_contacto");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nombre");

                    b.Property<string>("TelefonoContacto")
                        .HasColumnType("TEXT")
                        .HasColumnName("telefono_contacto");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Employee", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("empleado_id");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("apellido");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("contrasena");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nombre");

                    b.Property<string>("Rol")
                        .HasColumnType("TEXT")
                        .HasColumnName("rol");

                    b.Property<string>("id_card")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("passport")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmpleadoId");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "Email" }, "IX_Employees_email")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Loan", b =>
                {
                    b.Property<int>("PrestamoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("prestamo_id");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cliente_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("empleado_id");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("DATE")
                        .HasColumnName("fecha_fin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("DATE")
                        .HasColumnName("fecha_inicio");

                    b.Property<double>("Monto")
                        .HasColumnType("REAL")
                        .HasColumnName("monto");

                    b.Property<double>("MontoRestante")
                        .HasColumnType("REAL")
                        .HasColumnName("monto_restante");

                    b.Property<bool?>("MoraActiva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false)
                        .HasColumnName("mora_activa");

                    b.Property<int>("PlazoMeses")
                        .HasColumnType("INTEGER")
                        .HasColumnName("plazo_meses");

                    b.Property<double>("TasaInteres")
                        .HasColumnType("REAL")
                        .HasColumnName("tasa_interes");

                    b.HasKey("PrestamoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Payment", b =>
                {
                    b.Property<int>("PagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pago_id");

                    b.Property<bool?>("ATiempo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(true)
                        .HasColumnName("a_tiempo");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("DATE")
                        .HasColumnName("fecha_pago");

                    b.Property<double>("Monto")
                        .HasColumnType("REAL")
                        .HasColumnName("monto");

                    b.Property<double?>("Mora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(0.0)
                        .HasColumnName("mora");

                    b.Property<int>("PrestamoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prestamo_id");

                    b.HasKey("PagoId");

                    b.HasIndex("PrestamoId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.PenaltySetting", b =>
                {
                    b.Property<int>("MoraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("mora_id");

                    b.Property<bool?>("Activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(true)
                        .HasColumnName("activa");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double?>("MontoMora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(100.0)
                        .HasColumnName("monto_mora");

                    b.Property<int>("PrestamoId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prestamo_id");

                    b.HasKey("MoraId");

                    b.HasIndex("PrestamoId");

                    b.ToTable("PenaltySettings");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Client", b =>
                {
                    b.HasOne("API_PRESTAMOS.Models.Company", "Company")
                        .WithMany("Clients")
                        .HasForeignKey("CompanyId")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.ClientHistory", b =>
                {
                    b.HasOne("API_PRESTAMOS.Models.Client", "Cliente")
                        .WithMany("ClientHistories")
                        .HasForeignKey("ClienteId")
                        .IsRequired();

                    b.HasOne("API_PRESTAMOS.Models.Loan", "Prestamo")
                        .WithMany("ClientHistories")
                        .HasForeignKey("PrestamoId");

                    b.Navigation("Cliente");

                    b.Navigation("Prestamo");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Employee", b =>
                {
                    b.HasOne("API_PRESTAMOS.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Loan", b =>
                {
                    b.HasOne("API_PRESTAMOS.Models.Client", "Cliente")
                        .WithMany("Loans")
                        .HasForeignKey("ClienteId")
                        .IsRequired();

                    b.HasOne("API_PRESTAMOS.Models.Company", "Company")
                        .WithMany("Loans")
                        .HasForeignKey("CompanyId")
                        .IsRequired();

                    b.HasOne("API_PRESTAMOS.Models.Employee", "Empleado")
                        .WithMany("Loans")
                        .HasForeignKey("EmpleadoId")
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Company");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Payment", b =>
                {
                    b.HasOne("API_PRESTAMOS.Models.Loan", "Prestamo")
                        .WithMany("Payments")
                        .HasForeignKey("PrestamoId")
                        .IsRequired();

                    b.Navigation("Prestamo");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.PenaltySetting", b =>
                {
                    b.HasOne("API_PRESTAMOS.Models.Loan", "Prestamo")
                        .WithMany("PenaltySettings")
                        .HasForeignKey("PrestamoId")
                        .IsRequired();

                    b.Navigation("Prestamo");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Client", b =>
                {
                    b.Navigation("ClientHistories");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Company", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Employees");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Employee", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("API_PRESTAMOS.Models.Loan", b =>
                {
                    b.Navigation("ClientHistories");

                    b.Navigation("Payments");

                    b.Navigation("PenaltySettings");
                });
#pragma warning restore 612, 618
        }
    }
}
